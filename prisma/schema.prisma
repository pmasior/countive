// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String                     @id @default(cuid())
  name                     String?
  email                    String                     @unique
  emailVerified            DateTime?
  password                 String?
  image                    String?
  accounts                 Account[]
  sessions                 Session[]
  categories               Category[]
  settlementAccounts       SettlementAccount[]
  defaultTransactionValues DefaultTransactionValues[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(100)
  icon            Icon             @relation(fields: [iconId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  subcategories   Subcategory[]
  categoryBudgets CategoryBudget[]
  tags            Tag[]
  iconId          Int
}

model CategoryBudget {
  id         Int      @id @default(autoincrement())
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  amount     Decimal  @db.Decimal(21, 8)
  since      DateTime @db.Timestamptz(0)
  until      DateTime @db.Timestamptz(0)
}

model Subcategory {
  id                       Int                        @id @default(autoincrement())
  icon                     Icon                       @relation(fields: [iconId], references: [id])
  iconId                   Int
  category                 Category                   @relation(fields: [categoryId], references: [id])
  categoryId               Int
  name                     String
  color                    String                     @db.VarChar(25)
  subcategoryBudget        SubcategoryBudget[]
  transactions             Transaction[]
  defaultTransactionValues DefaultTransactionValues[]
}

model SubcategoryBudget {
  id            Int         @id @default(autoincrement())
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int
  amount        Decimal     @db.Decimal(21, 8)
  since         DateTime    @db.Timestamptz(0)
  until         DateTime    @db.Timestamptz(0)
}

model Icon {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  Category        Category[]
  Subcategory     Subcategory[]
  MethodOfPayment MethodOfPayment[]
}

model Tag {
  id           Int           @id @default(autoincrement())
  category     Category      @relation(fields: [categoryId], references: [id])
  name         String
  categoryId   Int
  transactions Transaction[]
}

model SettlementAccount {
  id                       Int                        @id @default(autoincrement())
  user                     User                       @relation(fields: [userId], references: [id])
  name                     String
  color                    String                     @db.VarChar(25)
  methodsOfPayments        MethodOfPayment[]
  userId                   String
  transactions             Transaction[]
  defaultTransactionValues DefaultTransactionValues[]
}

model MethodOfPayment {
  id                       Int                        @id @default(autoincrement())
  name                     String
  icon                     Icon                       @relation(fields: [iconId], references: [id])
  iconId                   Int
  settlementAccount        SettlementAccount          @relation(fields: [settlementAccountId], references: [id])
  settlementAccountId      Int
  transactions             Transaction[]
  defaultTransactionValues DefaultTransactionValues[]
}

model Transaction {
  id                  Int               @id @default(autoincrement())
  amount              Decimal           @db.Decimal(21, 8)
  addedAt             DateTime          @db.Timestamptz(0)
  note                String
  currency            Currency          @relation(fields: [currencyId], references: [id])
  currencyId          Int
  subcategory         Subcategory       @relation(fields: [subcategoryId], references: [id])
  subcategoryId       Int
  settlementAccount   SettlementAccount @relation(fields: [settlementAccountId], references: [id])
  settlementAccountId Int
  methodOfPayment     MethodOfPayment   @relation(fields: [methodOfPaymentId], references: [id])
  methodOfPaymentId   Int
  tags                Tag[]
}

model Currency {
  id                       Int                        @id @default(autoincrement())
  shortName                String
  name                     String
  transactions             Transaction[]
  defaultTransactionValues DefaultTransactionValues[]
}

model DefaultTransactionValues {
  user                User               @relation(fields: [userId], references: [id])
  userId              String             @id
  subcategory         Subcategory?       @relation(fields: [subcategoryId], references: [id])
  subcategoryId       Int?
  currency            Currency?          @relation(fields: [currencyId], references: [id])
  currencyId          Int?
  settlementAccount   SettlementAccount? @relation(fields: [settlementAccountId], references: [id])
  settlementAccountId Int?
  methodOfPayment     MethodOfPayment?   @relation(fields: [methodOfPaymentId], references: [id])
  methodOfPaymentId   Int?
}
